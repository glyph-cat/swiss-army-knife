import { hasProperty } from '../../data'
import { TruthRecord } from '../../types'

/**
 * @public
 */
export type HashGenerator<GeneratorArg = unknown> = (
  collisionCount: number,
  ...customArgs: Array<GeneratorArg>
) => string

/**
 * A base class hash factory for unique hash generation.
 * @public
 */
export class BaseHashFactory<GeneratorArg = unknown> {

  /**
   * @internal
   */
  private M$history: TruthRecord = {}

  constructor(
    /**
     * @internal
     */
    private readonly generator: HashGenerator,
  ) {
    this.create = this.create.bind(this)
    this.untrack = this.untrack.bind(this)
    this.reset = this.reset.bind(this)
    this.track = this.track.bind(this)
  }

  /**
   * Creates a new hash.
   */
  create(...customArgs: Array<GeneratorArg>): string {
    let hash: string
    let collisionCount = 0
    hash = this.generator(collisionCount, ...customArgs)
    while (this.has(hash)) {
      hash = this.generator(++collisionCount, ...customArgs)
    }
    this.M$history[hash] = true
    return hash
  }

  /**
   * Removes the hash from the history. Once removed, it becomes possible again
   * for that hash to be returned by the {@link create} method.
   */
  untrack(hash: string): void {
    delete this.M$history[hash]
  }

  /**
   * The list of hashes generated so far.
   */
  get history(): Array<string> {
    return Object.keys(this.M$history)
  }

  /**
   * Resets the history of generated hashes. Once reset, it becomes possible again
   * for all previously generated hashes to be returned by the {@link create} method.
   */
  reset(): void {
    this.M$history = {}
  }

  /**
   * Feeds an array of hashes that are supposedly already in use so that they
   * will be avoided when creating new hashes.
   * @param hashes - The array of hashes that are somehow already in use and
   * should not be generated.
   */
  track(...hashes: Array<string>): void {
    for (const hash of hashes) {
      this.M$history[hash] = true
    }
  }

  /**
   * Check if a hash has already been generated by this hash factory.
   * @param hash - The hash to check against
   * @returns `true` if the hash has already been generated, otherwise `false`.
   */
  has(hash: string): boolean {
    return hasProperty(this.M$history, hash)
  }

}
