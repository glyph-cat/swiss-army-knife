// What this base script does:
// Crawl through each subfolder then automatically export everything
// from those subfolders to 'index.scripted.ts'.

import chalk from 'chalk'
import { readdirSync, readFileSync, statSync, writeFileSync } from 'fs'
import { ENCODING_UTF_8 } from '../constants'

export function autoForwardExports(path: string): void {

  const now = new Date()
  const directoriesWithMissingIndexFiles: Array<string> = []

  crawl(path, (filePath: string) => {

    // #region Filtering
    const indexPattern = /\/index\.ts$/
    const ignorePattern = /\.(draft|old|scripted)\.?/
    if (!indexPattern.test(filePath)) { return }
    if (ignorePattern.test(filePath)) { return }
    const fileContents = readFileSync(filePath, ENCODING_UTF_8).trim()
    if (!/^export \* from '\.\/index\.scripted'$/.test(fileContents)) { return }
    // #endregion Filtering  

    // #region Get directory contents
    const directoryPath = filePath.replace(indexPattern, '')
    const items = readdirSync(directoryPath).filter((item) => {
      return !ignorePattern.test(item) && !/^\./.test(item) && !/^index\./.test(item)
    })
    // #endregion Get directory contents

    // #region Writing scripted output
    console.log(`${chalk.cyan(`(${items.length})`)} ${directoryPath}`)
    const codeLineStack = [
      '// Please do not edit here.',
      '// This file was automatically generated by the script `yarn afe`.',
      '// To learn more, refer to `tools/auto-forward-exports`',
      '// in the project root directory.',
      '',
    ]
    for (let i = 0; i < items.length; i++) {
      const item = items[i]
      const connector = i >= items.length - 1 ? '└' : '├'
      const subPath = `${directoryPath}/${item}`
      const hasIndexFile = checkIndexFile(subPath)
      if (!hasIndexFile) { directoriesWithMissingIndexFiles.push(subPath) }
      const indicator = hasIndexFile ? chalk.green('✓') : chalk.red('×')
      const isAbstractionsOrConstants = item === 'abstractions' || item === 'constants'
      console.log(chalk.gray(` ${connector} ${indicator} ${hasIndexFile
        ? item + (isAbstractionsOrConstants ? chalk.cyan.dim('/public') : '')
        : chalk.red(`${item} (missing index file)`)}`
      ))
      if (isAbstractionsOrConstants) {
        codeLineStack.push(`export * from './${item}/public'`)
      } else {
        codeLineStack.push(`export * from './${item}'`)
      }
    }
    codeLineStack.push(
      `\n// Generated on: ${now.toDateString()} ${now.toTimeString().match(/\d{2}:\d{2}:\d{2} [a-z]+\+\d{4}/i)[0]}.`,
    )
    writeFileSync(
      `${directoryPath}/index.scripted.ts`,
      codeLineStack.join('\n') + '\n',
      ENCODING_UTF_8,
    )
    // #endregion Writing scripted output

  })

  if (directoriesWithMissingIndexFiles.length > 0) {
    console.log(chalk.redBright('\nThese directories are missing index files:\n  ' + directoriesWithMissingIndexFiles.join('\n  ')) + '\n')
    process.exit(1)
  }

}

function crawl(dirPath: string, callback: (filePath: string) => void) {

  const allItemsInDir = readdirSync(dirPath)
  for (const item of allItemsInDir) {
    const nextPath = `${dirPath}/${item}`
    if (statSync(nextPath).isDirectory()) {
      crawl(nextPath, callback)
    } else {
      callback(nextPath)
    }
  }

}

function checkIndexFile(directoryPath: string): boolean {
  const items = readdirSync(directoryPath)
  return !!items.find((item) => /^index\.tsx?$/.test(item))
}
